{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrendings","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3ca1900a.chunk.js","sourcesContent":[" import axios from \"axios\"\r\n\r\n const instance = axios.create({\r\n     baseURL:\"https://api.themoviedb.org/3\",\r\n });\r\n\r\n export default instance;","import React, { useEffect, useState } from 'react';\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original\"; \r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n    const [movies,setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n    \r\n    // A snippet of code which runs based on a given condition\r\n     useEffect(() => {\r\n        //if [], run once when the row loads, and don't run again\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl)\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData()\r\n     }, [fetchUrl]);\r\n\r\n     const opts = {\r\n         height: \"390\",\r\n         width: \"100%\",\r\n         playerVars: {\r\n             autoplay: 1,\r\n         },\r\n     };\r\n\r\n     const handleClick = (movie) => {\r\n         if(trailerUrl) {\r\n             setTrailerUrl(\"\");\r\n         }\r\n         else{\r\n             movieTrailer(movie?.name || \"\")\r\n             .then((url) => {\r\n                    //https://www.youtube.com/watch?v=GRcmApC5AFY\r\n                    const urlParams = new URLSearchParams(new URL(url).search);\r\n                    setTrailerUrl(urlParams.get('v'));\r\n             })\r\n                .catch((error) => console.log(error));\r\n       }\r\n     }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n              {/* title */}\r\n              <h2>{title}</h2>\r\n              <div className=\"row__posters\">\r\n                {movies.map(movie => (\r\n                    <img \r\n                        key={movie.id}\r\n                        onClick={() => handleClick(movie)}\r\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                        src={`${base_url}${\r\n                                isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                            }`} \r\n                        alt={movie.name} />\r\n                ))}\r\n              </div>\r\n              {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","const API_KEY = \"c07ec86f37d451afded2b372110589f8\";\r\n\r\nconst requests = {\r\n fetchTrendings: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React, { useState, useEffect } from 'react';\r\nimport \"./Banner.css\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData(){\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results[\r\n                    Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n            );\r\n            return request; \r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    console.log(movie);\r\n\r\n    function truncate(str, n){\r\n        return str?.length > n ? str.substr(0, n-1) + \"...\" : str;\r\n    } \r\n\r\n    return (\r\n        <header className=\"banner\"\r\n        style={{\r\n            backgroundSize:\"cover\",\r\n            backgroundImage: `url(\r\n                \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n            )`,\r\n            backgroundPosition: \"center center\"\r\n        }}\r\n        >\r\n            <div className=\"banner_contents\">\r\n                <h1 className=\"banner__title\">{movie?.title || movie?.name || movie?.original_name}</h1>\r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner_button\">Play</button>\r\n                    <button className=\"banner_button\">My List</button>\r\n                </div>\r\n                <h1 className=\"banner__description\">{truncate(movie?.overview, 150)}</h1>\r\n            </div> \r\n            <div className=\"banner__fadedBottom\" />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from 'react';\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n\r\n    const [show, handleShow] = useState(false);\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () => {\r\n            if(window.scrollY > 100){\r\n                handleShow(true);\r\n            }\r\n            else handleShow(false)\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n    }, [])\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n            <img \r\n                className=\"nav__logo\"\r\n                src=\"https://logos-download.com/wp-content/uploads/2016/03/Netflix_logo.png\"\r\n                alt=\"Netflix Logo\"\r\n            />\r\n            <img \r\n                className=\"nav__avatar\"\r\n                src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\"\r\n                alt = \"Netflix Avatar\"\r\n            />    \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\nimport './App.css';\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner />\n      <Row \n        title=\"NETFLIX ORIGINALS\" \n        fetchUrl={requests.fetchNetflixOriginals} \n        isLargeRow\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrendings } />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated } />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies } />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies } />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies } />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies } />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries } />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}